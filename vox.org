# -*- mode: org; fill-column: 78; -*-
# Time-stamp: <2023-12-14 18:09:47 krylon>
#
#+TAGS: go(g) internals(i) ui(u) bug(b) feature(f)
#+TAGS: database(d) design(e), meditation(m)
#+TAGS: optimize(o) refactor(r) cleanup(c)
#+TODO: TODO(t)  RESEARCH(r) IMPLEMENT(i) TEST(e) | DONE(d) FAILED(f) CANCELLED(c)
#+TODO: MEDITATE(m) PLANNING(p) | SUSPENDED(s)
#+PRIORITIES: A G D

* Vox
  Vox is an audio book reader that saves your listening progress.
* Clock table
  #+BEGIN: clocktable :scope file :maxlevel 202 :emphasize t
  #+CAPTION: Clock summary at [2023-12-14 Do 18:09]
  | Headline                   | Time      |            |       |      |
  |----------------------------+-----------+------------+-------+------|
  | *Total time*               | *3d 1:48* |            |       |      |
  |----------------------------+-----------+------------+-------+------|
  | *Components [0/0]*         | *3d 1:48* |            |       |      |
  | \_  /Database [1/1]/       |           | /14:32/    |       |      |
  | \_    Data types           |           |            |  2:35 |      |
  | \_  /Scanner [0/0]/        |           | /1:03/     |       |      |
  | \_  /Player [1/1]/         |           | /17:13/    |       |      |
  | \_    Playlist [0/0]       |           |            |  9:04 |      |
  | \_  /UI [3/5]/             |           | /1d 17:00/ |       |      |
  | \_    Player [2/2]         |           |            |  9:59 |      |
  | \_      Pump up the volume |           |            |       | 1:18 |
  | \_    Managing Programs    |           |            | 10:37 |      |
  #+END:
* Components [0/0]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :VISIBILITY: children
  :END:
** Database [1/1]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   :LOGBOOK:
   CLOCK: [2023-11-04 Sa 18:05]--[2023-11-04 Sa 20:50] =>  2:45
   CLOCK: [2023-11-03 Fr 17:46]--[2023-11-03 Fr 20:31] =>  2:45
   CLOCK: [2023-11-02 Do 20:17]--[2023-11-02 Do 21:37] =>  1:20
   CLOCK: [2023-10-29 So 16:35]--[2023-10-29 So 18:55] =>  2:20
   CLOCK: [2023-10-28 Sa 21:15]--[2023-10-28 Sa 23:44] =>  2:29
   CLOCK: [2023-10-28 Sa 15:47]--[2023-10-28 Sa 16:05] =>  0:18
   :END:
*** DONE Data types
    CLOSED: [2023-12-13 Mi 19:31]
    :LOGBOOK:
    CLOCK: [2023-10-31 Di 19:24]--[2023-10-31 Di 20:31] =>  1:07
    CLOCK: [2023-10-26 Do 22:45]--[2023-10-27 Fr 00:01] =>  1:16
    CLOCK: [2023-10-26 Do 17:55]--[2023-10-26 Do 18:07] =>  0:12
    :END:
    I copied the database schema over from my last attempt in Go, now I need
    to change my data types accordingly. :-|
** Scanner [0/0]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   :LOGBOOK:
   CLOCK: [2023-11-06 Mo 18:51]--[2023-11-06 Mo 19:33] =>  0:42
   CLOCK: [2023-11-06 Mo 13:14]--[2023-11-06 Mo 13:35] =>  0:21
   :END:
** Player [1/1]
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   :LOGBOOK:
   CLOCK: [2023-11-20 Mo 20:31]--[2023-11-20 Mo 21:00] =>  0:29
   CLOCK: [2023-11-20 Mo 20:21]--[2023-11-20 Mo 20:31] =>  0:10
   CLOCK: [2023-11-20 Mo 19:12]--[2023-11-20 Mo 20:20] =>  1:08
   CLOCK: [2023-11-18 Sa 18:28]--[2023-11-18 Sa 21:35] =>  3:07
   CLOCK: [2023-11-18 Sa 16:41]--[2023-11-18 Sa 17:55] =>  1:14
   CLOCK: [2023-11-16 Do 20:30]--[2023-11-16 Do 22:31] =>  2:01
   :END:
   I have settled on using GStreamer. The documentation I was able to find is
   *very* Spartan, but I found a few examples that helped me figure out
   something that works. I mean, my needs are simple enough, fortunately.
   In the long run I might look at Pipewire, but for now we're good. Most
   importantly, GStreamer handles all the decoding, so I can just tell it to
   "play this file" and don't need to worry about the specific file format
   and/or audio codec.
*** DONE Playlist [0/0]
    CLOSED: [2023-12-13 Mi 19:29]
    :PROPERTIES:
    :COOKIE_DATA: todo recursive
    :VISIBILITY: children
    :END:
    :LOGBOOK:
    CLOCK: [2023-12-06 Mi 18:34]--[2023-12-06 Mi 20:24] =>  1:50
    CLOCK: [2023-12-04 Mo 19:34]--[2023-12-04 Mo 19:43] =>  0:09
    CLOCK: [2023-12-02 Sa 17:09]--[2023-12-02 Sa 17:50] =>  0:41
    CLOCK: [2023-12-02 Sa 15:12]--[2023-12-02 Sa 16:21] =>  1:09
    CLOCK: [2023-11-28 Di 15:48]--[2023-11-28 Di 20:33] =>  4:45
    CLOCK: [2023-11-27 Mo 22:51]--[2023-11-27 Mo 23:21] =>  0:30
    :END:
** UI [3/5]                                                              :ui:
   :PROPERTIES:
   :COOKIE_DATA: todo recursive
   :VISIBILITY: children
   :END:
   :LOGBOOK:
   CLOCK: [2023-11-22 Mi 18:15]--[2023-11-22 Mi 21:15] =>  3:00
   CLOCK: [2023-11-20 Mo 21:00]--[2023-11-20 Mo 22:39] =>  1:39
   CLOCK: [2023-11-14 Di 20:18]--[2023-11-14 Di 23:33] =>  3:15
   CLOCK: [2023-11-14 Di 15:02]--[2023-11-14 Di 16:17] =>  1:15
   CLOCK: [2023-11-13 Mo 22:23]--[2023-11-14 Di 00:06] =>  1:43
   CLOCK: [2023-11-11 Sa 18:34]--[2023-11-11 Sa 21:04] =>  2:30
   CLOCK: [2023-11-10 Fr 21:08]--[2023-11-10 Fr 23:25] =>  2:17
   CLOCK: [2023-11-08 Mi 18:38]--[2023-11-08 Mi 19:45] =>  1:07
   CLOCK: [2023-11-08 Mi 09:28]--[2023-11-08 Mi 11:14] =>  1:46
   CLOCK: [2023-11-07 Di 19:34]--[2023-11-07 Di 21:26] =>  1:52
   :END:
*** TODO Signal handlers                       :ui:optimize:refactor:cleanup:
    In Go, I could not register arguments alongside signal handlers, so I
    resorted to writing methods that returned closures and used /those/ as
    signal handlers, with pre-packaged arguments kind of.
    In Python, I *can* pass arguments when registering signal handlers, and
    since that is almost certainly more efficient, I should rewrite my code to
    do that eventually. For now, it's not big problem. But I would like to do
    that for aesthetic reasons if nothing else.
*** DONE Player [2/2]
CLOSED: [2023-12-14 Do 18:09]
    :LOGBOOK:
    CLOCK: [2023-12-11 Mo 19:32]--[2023-12-11 Mo 22:19] =>  2:47
    CLOCK: [2023-12-09 Sa 17:45]--[2023-12-09 Sa 19:01] =>  1:16
    CLOCK: [2023-12-08 Fr 18:21]--[2023-12-08 Fr 19:42] =>  1:21
    CLOCK: [2023-12-07 Do 17:52]--[2023-12-07 Do 21:09] =>  3:17
    :END:
**** DONE Resume playback from last known position
     CLOSED: [2023-12-14 Do 18:09]
     [2023-12-13 Mi 19:28]
     Resuming playback of a Program at the most recently played file already
     works. But I also want to jump to the most recently played position
     within that file. Some audiobooks consist of a small number of long
     files, some even just a single file, so just resuming playback at the
     last played file is not enough. I have done some work towards this end
     already. The playback position is regularly queried and saved to the
     database, but telling the player to seek to that position does not work,
     yet, and I don't understand where the problem is. Manually seeking works
     fine, so I suspect it's a timing problem.
**** DONE Pump up the volume                                        :feature:
     CLOSED: [2023-12-12 Di 18:33]
     :LOGBOOK:
     CLOCK: [2023-12-12 Di 17:49]--[2023-12-12 Di 18:33] =>  0:44
     CLOCK: [2023-12-11 Mo 22:28]--[2023-12-11 Mo 23:02] =>  0:34
     :END:
     It's kind of essential.
     I used a SpinButton. I'm not super happy with it aesthetically, but it
     does what it's supposed to.
*** TODO Managing Programs
    :LOGBOOK:
    CLOCK: [2023-12-13 Mi 17:52]--[2023-12-13 Mi 19:15] =>  1:23
    CLOCK: [2023-12-12 Di 19:04]--[2023-12-12 Di 22:50] =>  3:46
    CLOCK: [2023-12-05 Di 16:00]--[2023-12-05 Di 17:55] =>  1:55
    CLOCK: [2023-12-05 Di 15:37]--[2023-12-05 Di 15:47] =>  0:10
    CLOCK: [2023-12-04 Mo 20:54]--[2023-12-04 Mo 21:50] =>  0:56
    CLOCK: [2023-11-21 Di 17:15]--[2023-11-21 Di 19:42] =>  2:27
    :END:
* Bugs

